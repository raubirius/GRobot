
/**
 * <p>Opens the given file for reading, assuming the platform’s native
 * encoding for file names.</p>
 * 
 * @param f the archive
 * 
 * @throws IOException if an error occurs while reading the file
 */
public ZipFile(final File f) throws IOException;

/**
 * <p>Opens the given file for reading, assuming the platform’s native
 * encoding for file names.</p>
 * 
 * @param name name of the archive
 * 
 * @throws IOException if an error occurs while reading the file
 */
public ZipFile(final String name) throws IOException;

/**
 * <p>Opens the given file for reading, assuming the specified encoding
 * for file names, scanning unicode extra fields.</p>
 * 
 * @param name name of the archive
 * @param encoding the encoding to use for file names, use null for the
 *     platform’s default encoding
 * 
 * @throws IOException if an error occurs while reading the file
 */
public ZipFile(final String name, final String encoding) throws IOException;

/**
 * <p>Opens the given file for reading, assuming the specified encoding
 * for file names and scanning for unicode extra fields.</p>
 * 
 * @param f the archive
 * @param encoding the encoding to use for file names, use null for the
 *     platform’s default encoding
 * 
 * @throws IOException if an error occurs while reading the file
 */
public ZipFile(final File f, final String encoding) throws IOException;

/**
 * <p>Opens the given file for reading, assuming the specified encoding
 * for file names.</p>
 * 
 * @param f the archive
 * @param encoding the encoding to use for file names, use null for the
 *     platform’s default encoding
 * @param useUnicodeExtraFields whether to use InfoZIP Unicode Extra Fields
 *     (if present) to set the file names
 * 
 * @throws IOException if an error occurs while reading the file
 */
public ZipFile(final File f, final String encoding, final boolean useUnicodeExtraFields) throws IOException;

/**
 * <p>The encoding to use for filenames and the file comment.</p>
 * 
 * @return null if using the platform’s default character encoding
 */
public String getEncoding();

/**
 * <p>Closes the archive.</p>
 * 
 * @throws IOException if an error occurs closing the archive
 */
public void close() throws IOException;

/**
 * <p>Close a zipfile quietly. Throw no IO fault, do nothing on a null
 * parameter.</p>
 * 
 * @param zipfile file to close, can be null
 */
public static void closeQuietly(final ZipFile zipfile);

/**
 * <p>Returns all entries.</p>
 * 
 * <p>Entries will be returned in the same order they appear within the
 * archive’s central directory.</p>
 * 
 * @return all entries as {@link ZipEntry} instances
 */
public Enumeration<ZipEntry> getEntries();

/**
 * <p>Returns all entries in physical order.</p>
 * 
 * <p>Entries will be returned in the same order their contents appear
 * within the archive.</p>
 * 
 * @return all entries as {@link ZipEntry} instances
 */
public Enumeration<ZipEntry> getEntriesInPhysicalOrder();

/**
 * <p>Returns a named entry - or {@code null} if no entry by that name
 * exists.</p>
 * 
 * <p>If multiple entries with the same name exist the first entry in the
 * archive’s central directory by that name is returned.</p>
 * 
 * @param name name of the entry
 * @return the ZipEntry corresponding to the given name - or {@code null}
 *     if not present
 */
public ZipEntry getEntry(final String name);

/**
 * <p>Returns all named entries in the same order they appear within the
 * archive’s central directory.</p>
 * 
 * @param name name of the entry
 * @return the Iterable&lt;ZipEntry&gt; corresponding to the given name
 */
public Iterable<ZipEntry> getEntries(final String name);

/**
 * <p>Returns all named entries in the same order their contents appear
 * within the archive.</p>
 * 
 * @param name name of the entry
 * @return the Iterable&lt;ZipEntry&gt; corresponding to the given name
 */
public Iterable<ZipEntry> getEntriesInPhysicalOrder(final String name);

/**
 * <p>Whether this class is able to read the given entry.</p>
 * 
 * <p>May return false if it is set up to use encryption or a compression
 * method that hasn’t been implemented yet.</p>
 * 
 * @param ze ZipEntry
 * @return boolean
 */
public boolean canReadEntryData(final ZipEntry ze);

/**
 * <p>Returns an InputStream for reading the contents of the given entry.</p>
 * 
 * @param ze the entry to get the stream for
 * @return a stream to read the entry from
 * 
 * @throws IOException if unable to create an input stream from the zipentry
 * @throws ZipException if the zipentry uses an unsupported feature
 */
public InputStream getInputStream(final ZipEntry ze) throws IOException, ZipException;
